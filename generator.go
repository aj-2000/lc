package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

func generateTemplate(includePackage bool) {
	inputDir := "dsa"
	outputFile := "template.go.txt"

	files, err := filepath.Glob(filepath.Join(inputDir, "*.go"))
	if err != nil {
		fmt.Println("Error reading directory:", err)
		return
	}

	if len(files) == 0 {
		fmt.Println("No Go files found in directory.")
		return
	}

	packageName := ""
	imports := make(map[string]bool)
	var codeLines []string

	importBlock := false
	importRegex := regexp.MustCompile(`^\"(.*?)\"$`)

	for _, file := range files {
		content, err := os.ReadFile(file)
		if err != nil {
			fmt.Println("Error reading file:", file, err)
			continue
		}

		lines := strings.Split(string(content), "\n")
		for _, line := range lines {
			line = strings.TrimSpace(line)
			if strings.HasPrefix(line, "package") && packageName == "" {
				packageName = strings.Fields(line)[1]
			} else if strings.HasPrefix(line, "import (") {
				importBlock = true
			} else if importBlock {
				if line == ")" {
					importBlock = false
				} else if matches := importRegex.FindStringSubmatch(line); len(matches) > 1 {
					imports[matches[1]] = true
				}
			} else if !strings.HasPrefix(line, "package") && !strings.HasPrefix(line, "import") {
				codeLines = append(codeLines, line)
			}
		}
	}

	// Construct the output Go code
	var buffer bytes.Buffer

	if packageName != "" && includePackage {
		fmt.Fprintf(&buffer, "package %s\n\n", packageName)
	}

	if len(imports) > 0 {
		fmt.Fprintln(&buffer, "import (")
		for imp := range imports {
			fmt.Fprintf(&buffer, "\t\"%s\"\n", imp)
		}
		fmt.Fprintln(&buffer, ")")
	}

	for _, line := range codeLines {
		fmt.Fprintln(&buffer, line)
	}

	// Format the code using gofmt
	formattedCode, err := format.Source(buffer.Bytes())
	if err != nil {
		fmt.Println("Error formatting code:", err)
		return
	}

	// Write formatted code to file
	autoGeneratedCode := "// Code generated by generator.go; DO NOT EDIT.\n\n// <---------Autogenerated Code Start-------->\n\n"
	autoGeneratedCode += string(formattedCode) + "\n"
	autoGeneratedCode += "// <---------Autogenerated Code End-------->\n"
	if err := os.WriteFile(outputFile, []byte(autoGeneratedCode), 0644); err != nil {
		fmt.Println("Error writing output file:", err)
		return
	}

	fmt.Println("Merged and formatted Go files into", outputFile)
}
